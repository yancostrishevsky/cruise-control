package cruise_control
public
	with sei;
	with Base_Types;

	data bool_type
		properties
			Data_Size => 16 bits;
	end bool_type;

	data float_type
		properties
			Data_Size => 32 bits;
	end float_type;

	data image_type
		properties
			Data_Size => 1024 bytes;
	end image_type;

-- Devices
	device cruise_control_button
		features
			busAccess: requires bus access CAN;
			busAccess2: requires bus access PC104_ISA_16BIT;
			cc_system_on_off: out data port Base_Types::Boolean;
		properties
			SEI::MIPSBudget => 0.1 mips;
			SEI::RAMBudget => 1.0 KByte;
	end cruise_control_button;

	device brake_pedal
		features
			busAccess: requires bus access PC104_ISA_16BIT;
			brake_status: out data port Base_Types::Boolean;
		flows
			Flow1: flow source brake_status {Latency => 10ms .. 10ms;};
		properties
			SEI::MIPSBudget => 0.2 mips;
			SEI::RAMBudget => 1.0 KByte;
	end brake_pedal;

	device wheel_rotation_sensor
		features
			busAccess: requires bus access CAN;
			busAccess2: requires bus access PC104_ISA_16BIT;
			wheel_pulse: out data port float_type;
		properties
			SEI::MIPSBudget => 0.2 mips;
			SEI::RAMBudget => 1.0 KByte;
	end wheel_rotation_sensor;

	device throttle_actuator
		features
			busAccess: requires bus access PC104_ISA_16BIT;
			throttle_setting: in data port float_type;
		flows
			Flow1: flow sink throttle_setting {Latency => 20ms .. 20ms;};
		properties
			SEI::MIPSBudget => 0.3 mips;
			SEI::RAMBudget => 1.0 KByte;
	end throttle_actuator;

	device engine
		features
			busAccess: requires bus access PC104_ISA_16BIT;
			engine_status: out data port Base_Types::Boolean;
		properties
			SEI::MIPSBudget => 0.1 mips;
			SEI::RAMBudget => 1.0 KByte;
	end engine;

	device resume_button
		features
			busAccess: requires bus access CAN;
			busAccess2: requires bus access PC104_ISA_16BIT;
			resume: out data port Base_Types::Boolean;
		properties
			SEI::MIPSBudget => 0.1 mips;
			SEI::RAMBudget => 1.0 KByte;
	end resume_button;

	device speed_up_button
		features
			busAccess: requires bus access CAN;
			busAccess2: requires bus access PC104_ISA_16BIT;
			increase_speed: out data port Base_Types::Boolean;
		properties
			SEI::MIPSBudget => 0.1 mips;
			SEI::RAMBudget => 1.0 KByte;
	end speed_up_button;

	device speed_dn_button
		features
			busAccess: requires bus access CAN;
			busAccess2: requires bus access PC104_ISA_16BIT;
			decrease_speed: out data port Base_Types::Boolean;
		properties
			SEI::MIPSBudget => 0.1 mips;
			SEI::RAMBudget => 1.0 KByte;
	end speed_dn_button;

	device radar_sensor
		features
			distance_to_vehicle: out data port float_type;
			busAccess: requires bus access PC104_ISA_16BIT;
			properties
			SEI::MIPSBudget => 0.2 mips;
			SEI::RAMBudget => 1.0 KByte;
	end radar_sensor;

	device lane_camera
		features
			lane_image: out data port image_type;
			busAccess: requires bus access PC104_ISA_16BIT;
		properties
			SEI::MIPSBudget => 0.3 mips;
			SEI::RAMBudget => 1.0 KByte;
	end lane_camera;

	device lane_departure_warning_actuator
		features
			lane_warning_signal: in data port bool_type;
			busAccess: requires bus access PC104_ISA_16BIT;
		properties
			SEI::MIPSBudget => 0.2 mips;
			SEI::RAMBudget => 1.0 KByte;
	end lane_departure_warning_actuator;

	device vibration_motor
		features
			vibration_signal: in data port bool_type;
			busAccess: requires bus access PC104_ISA_16BIT;
		properties
			SEI::MIPSBudget => 0.2 mips;
			SEI::RAMBudget => 1.0 KByte;
	end vibration_motor;

	device auditory_warning_system
		features
			auditory_signal: in data port bool_type;
			busAccess: requires bus access PC104_ISA_16BIT;
		properties
			SEI::MIPSBudget => 0.2 mips;
			SEI::RAMBudget => 1.0 KByte;
	end auditory_warning_system;

	device visual_alert_system
		features
			visual_signal: in data port bool_type;
			busAccess: requires bus access PC104_ISA_16BIT;
		properties
			SEI::MIPSBudget => 0.2 mips;
			SEI::RAMBudget => 1.0 KByte;
	end visual_alert_system;


process brake_management
	features
		
		brake_status: in data port Base_Types::Boolean;
		ok_to_run: out data port Base_Types::Boolean;
	flows
		FS1: flow path brake_status -> ok_to_run;
	properties
		SEI::MIPSBudget => 0.3 mips;
		SEI::RAMBudget => 1.0 KByte;
end brake_management;


-- Poprawiona deklaracja systemu in_control
process in_control
	features
		cc_system_on_off: in data port Base_Types::Boolean;
		brake_status: in data port Base_Types::Boolean;
		resume: in data port Base_Types::Boolean;
		decrease_speed: in data port Base_Types::Boolean;
		increase_speed: in data port Base_Types::Boolean;
		engine_status: in data port Base_Types::Boolean;
		ok_to_run: out data port Base_Types::Boolean;
	flows
		FS1: flow path brake_status -> ok_to_run {Latency => 30ms .. 30ms;};
	properties
		SEI::MIPSBudget => 0.5 mips;
		SEI::RAMBudget => 1.0 KByte;
end in_control;



	process compute_velocity
		features
			wheel_pulse: in data port float_type;
			instantaneous_velocity: out data port float_type;
		flows
			FS1: flow path wheel_pulse -> instantaneous_velocity;
		properties
			SEI::MIPSBudget => 0.4 mips;
			SEI::RAMBudget => 1.0 KByte;
	end compute_velocity;

	process compute_desired_speed
		features
			ok_to_run: in data port Base_Types::Boolean;
			instantaneous_velocity: in data port float_type;

			desired_speed: out data port float_type;
		flows
			FS1: flow path ok_to_run -> desired_speed {Latency => 40ms .. 40ms;};
			FS2: flow path instantaneous_velocity -> desired_speed;
		properties
			SEI::MIPSBudget => 0.5 mips;
			SEI::RAMBudget => 1.0 KByte;
	end compute_desired_speed;

	process compute_throttle_setting
		features
			desired_speed: in data port float_type;
			throttle_setting: out data port float_type;
		flows
			FS1: flow path desired_speed -> throttle_setting {Latency => 50ms .. 50ms;};
		properties
			SEI::MIPSBudget => 0.5 mips;
			SEI::RAMBudget => 1.0 KByte;
	end compute_throttle_setting;

	process active_cruise_control
		features
			distance_to_vehicle: in data port float_type;
			desired_speed: in data port float_type;
			adjusted_speed: out data port float_type;
		flows
			FS1: flow path desired_speed -> adjusted_speed;
		properties
			SEI::MIPSBudget => 0.6 mips;
			SEI::RAMBudget => 1.0 KByte;
	end active_cruise_control;

	process lane_control_module
		features
			lane_warning_signal: in data port bool_type;
			lane_warning_output: out data port bool_type;
		flows
			FS1: flow path lane_warning_signal -> lane_warning_output;
		properties
			SEI::MIPSBudget => 0.4 mips;
			SEI::RAMBudget => 1.0 KByte;
	end lane_control_module;

	process lane_departure_detection_system
		features
			lane_image: in data port image_type;
			lane_warning_signal: out data port bool_type;
		flows
			FS1: flow path lane_image -> lane_warning_signal;
		properties
			SEI::MIPSBudget => 0.4 mips;
			SEI::RAMBudget => 1.0 KByte;
	end lane_departure_detection_system;

-- Hardware platform declaration
	bus PC104_ISA_16BIT
		properties
			SEI::BandWidthCapacity => 2.0 MBytesps;
			SEI::BandWidthBudget => 200.0 KBytesps;
	end PC104_ISA_16BIT;
	
	bus CAN
		properties
			SEI::BandWidthCapacity => 2.0 MBytesps;
			SEI::BandWidthBudget => 200.0 KBytesps;
	end CAN;

	memory SDRAM
		features
			controller_memory: requires bus access PC104_ISA_16BIT;
			controller_memory_2: requires bus access CAN;
		properties
			SEI::RAMCapacity => 4.0 GByte;
	end SDRAM;

	processor PENTIUM
		features
			busAccess: requires bus access CAN;
			controller_cpu: requires bus access PC104_ISA_16BIT;
		properties
			Scheduling_Protocol => (Round_Robin_Protocol);
			Clock_Period => 1ms;
			Timing_Properties::Processor_Capacity => 1.0 MIPS;
			SEI::MIPSCapacity => 5.0 mips;
	end PENTIUM;

-- The cruise control software system - composed of only ports, and the flow we want to analyze
system cruise_control
end cruise_control;

system implementation cruise_control.impl
	subcomponents
	  ENGINE: device engine;
	  BRAKE: device brake_pedal;
	  SP_UP: device speed_up_button;
	  SP_DN: device speed_dn_button;
	  TA: device throttle_actuator;
	  WHEEL_ROT_SENSOR: device wheel_rotation_sensor;
	  RESUME_BUTTON: device resume_button;
	  CC_ON_OFF: device cruise_control_button;
	  I_C: process in_control;
	  C_V: process compute_velocity;
	  C_D_S: process compute_desired_speed;
	  C_T_S: process compute_throttle_setting;
	  ASC: process active_cruise_control;
	  LCM: process lane_control_module;
	  LDDS: process lane_departure_detection_system;
	  RADAR: device radar_sensor;
	  LANE_CAMERA: device lane_camera;
	  LANE_WARNING: device lane_departure_warning_actuator;
	  VIBRATION_MOTOR: device vibration_motor;
	  AUDITORY_WARNING: device auditory_warning_system;
	  VISUAL_ALERT: device visual_alert_system;
	  AGH_memory: memory SDRAM;
	  AGH_bus: bus PC104_ISA_16BIT;
	  CAN_bus: bus CAN;
	  AGH_processor: processor PENTIUM;

	  -- Additional Processes
	  BRAKE_MANAGEMENT: process brake_management;

	connections
	  C1: port CC_ON_OFF.cc_system_on_off -> I_C.cc_system_on_off;
	  C2: port BRAKE.brake_status -> BRAKE_MANAGEMENT.brake_status;
	  C7: port BRAKE_MANAGEMENT.ok_to_run -> I_C.brake_status;
	  C3: port ENGINE.engine_status -> I_C.engine_status;
	  C4: port RESUME_BUTTON.resume -> I_C.resume;
	  C5: port SP_DN.decrease_speed -> I_C.decrease_speed;
	  C6: port SP_UP.increase_speed -> I_C.increase_speed;
	  C8: port WHEEL_ROT_SENSOR.wheel_pulse -> C_V.wheel_pulse;
	  C9: port I_C.ok_to_run -> C_D_S.ok_to_run;
	  
	  C10: port C_V.instantaneous_velocity -> C_D_S.instantaneous_velocity;
	  C12: port C_D_S.desired_speed -> ASC.desired_speed;
	  C13: port ASC.adjusted_speed -> C_T_S.desired_speed;
	  C14: port C_T_S.throttle_setting -> TA.throttle_setting;
	  
	  C15: port RADAR.distance_to_vehicle -> ASC.distance_to_vehicle;
	  C16: port LANE_CAMERA.lane_image -> LDDS.lane_image;
	  C17: port LDDS.lane_warning_signal -> LCM.lane_warning_signal;
	  C18: port LCM.lane_warning_output -> LANE_WARNING.lane_warning_signal;
	  C19: port LCM.lane_warning_output -> VIBRATION_MOTOR.vibration_signal;
	  C20: port LCM.lane_warning_output -> AUDITORY_WARNING.auditory_signal;
	  C21: port LCM.lane_warning_output -> VISUAL_ALERT.visual_signal;
	  C22: bus access AGH_bus -> AGH_memory.controller_memory;
	  C23: bus access AGH_bus -> AGH_processor.controller_cpu;
	  C24: bus access AGH_processor.controller_cpu -> AGH_bus;
	  C25: bus access RADAR.busAccess -> AGH_bus;
	  C26: bus access LANE_CAMERA.busAccess -> AGH_bus;
	  C27: bus access LANE_WARNING.busAccess -> AGH_bus;
	  C28: bus access VIBRATION_MOTOR.busAccess -> AGH_bus;
	  C29: bus access AUDITORY_WARNING.busAccess -> AGH_bus;
	  C30: bus access VISUAL_ALERT.busAccess -> AGH_bus;
	  C31: bus access ENGINE.busAccess-> AGH_bus;
	  C32: bus access BRAKE.busAccess-> AGH_bus;
	  C33: bus access SP_UP.busAccess-> CAN_bus;
	  C34: bus access SP_DN.busAccess-> CAN_bus;
	  C35: bus access TA.busAccess-> AGH_bus;
	  C36: bus access WHEEL_ROT_SENSOR.busAccess-> CAN_bus;
	  C37: bus access CC_ON_OFF.busAccess-> CAN_bus;
	  C38: bus access CAN_bus -> AGH_processor.busAccess;
	  C39: bus access SP_UP.busAccess2-> AGH_bus;
	  C40: bus access SP_DN.busAccess2-> AGH_bus;
	  C41: bus access RESUME_BUTTON.busAccess2-> AGH_bus;
	  C42: bus access WHEEL_ROT_SENSOR.busAccess2-> AGH_bus;
	  C43: bus access CC_ON_OFF.busAccess2-> AGH_bus;
	properties
	  Actual_Processor_Binding => (reference(AGH_processor)) applies to I_C, C_V, C_D_S, C_T_S, ASC, LCM, LDDS;
	  Actual_Memory_Binding => (reference(AGH_memory)) applies to RADAR, LANE_CAMERA, LANE_WARNING, VIBRATION_MOTOR, AUDITORY_WARNING, VISUAL_ALERT;
	  Actual_Connection_Binding => (reference(AGH_bus)) applies to C1, C2, C3, C4, C5, C6, C8, C9, C10, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21, C25, C26, C27, C28, C29, C30;
end cruise_control.impl;



system AGH_cruise_control_system
	properties
		SEI::MIPSCapacity => 2.4 mips;
end AGH_cruise_control_system;

system implementation AGH_cruise_control_system.AGH
	subcomponents
		AGH_memory: memory SDRAM;
		AGH_bus: bus PC104_ISA_16BIT;
		AGH_processor: processor PENTIUM;
	connections
		C1: bus access AGH_bus -> AGH_memory.controller_memory;
		C2: bus access AGH_bus -> AGH_processor.controller_cpu;
		C3: bus access AGH_processor.controller_cpu -> AGH_bus;
end AGH_cruise_control_system.AGH;

end cruise_control;
